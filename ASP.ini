#Place the higher risk commands at the top of the file -  Sort from High risk to Low risk
[ASP Command Injection 1]
Comment: ASP Potential Command Injection
Regex: (CreateObject\(\s*\"WScript.Shell\"\s*\))
Message: A reference to a potential Command Injection
Confidence: Medium
RiskLevel: 2
[ASP Command Injection 2]
Comment: ASP Potential Command Injection
Regex: (CreateObject\(\s*)
Message: A reference to a potential Command Injection
Confidence: Low
RiskLevel: 1
[ASP SQL Command Injection 1]
Comment: ASP Potential Command Injection
Regex: (Server\.CreateOject\(["']ADODB\.Command)
Message: A reference to a potential SQL injection
Confidence: Low
RiskLevel: 1
[ASP SQL RecordSet Injection 1]
Comment: ASP Potential Command Injection
Regex: (Server\.CreateOject\(["']ADODB\.RecordSet)
Message: A reference to a potential SQL injection
Confidence: Low
RiskLevel: 1
[ASP RecordSet Open Injection 1]
Comment: ASP Potential Command Injection
Regex: (rs\.open)
Message: A reference to a potential SQL injection
Confidence: Low
RiskLevel: 1
[ASP XSS 1]
Comment: Potential XSS
Regex: ((?i)Response\.Write\s*.+\&)
Message: ASP reference to a potential XSS
Action: Ensure the input from user is not being passed back as output without being sanitized
Explanation: Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application reflects user input without validation or encoding.
CWE: CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
References: https://cwe.mitre.org/data/definitions/79.html,https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
Confidence: Low
RiskLevel: 1

